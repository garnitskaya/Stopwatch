{"version":3,"sources":["components/buttons/Buttons.js","components/timer/Timer.js","components/app/App.js","index.js"],"names":["Buttons","button","name","action","toggleStart","reset","ref","waitRef","map","className","onClick","Timer","time","getZero","num","hours","Math","floor","minutes","seconds","App","useState","started","setStarted","setTime","active","setActive","createRef","useEffect","stream$","Subject","clicks","fromEvent","current","doubleClick","pipe","buffer","debounceTime","click","length","filter","tap","timer$","interval","takeUntil","subscribe","unsubscribe","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAuBeA,EArBC,SAAC,GAAqC,IAO5CC,EANU,CACZ,CAAEC,KAAM,aAAcC,OAFuB,EAAlCC,aAGX,CAAEF,KAAM,QAASC,OAH4B,EAArBE,OAIxB,CAAEH,KAAM,OAAQI,IAJ6B,EAAdC,UAOZC,KAAI,YAA4B,IAAzBN,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,OAAQG,EAAU,EAAVA,IACxC,OACI,wBACIA,IAAKA,EAELG,UAAU,MACVC,QAASP,EAJb,SAKKD,GAHIA,MAOjB,OAAO,8BAAMD,KCEFU,EAtBD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEPC,EAAU,SAACC,GACb,OAAIA,GAAO,GAAKA,EAAM,GACZ,IAAN,OAAWA,GAERA,GAGLC,EAAQF,EAAQG,KAAKC,MAAOL,EAAI,KAAe,KAC/CM,EAAUL,EAAQG,KAAKC,MAAOL,EAAO,GAAM,KAC3CO,EAAUN,EAAQG,KAAKC,MAAOL,EAAO,KAE3C,OACI,gCACKG,EADL,IAEKG,EAFL,IAGKC,M,MCsDEC,MA7Df,WACI,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,GAAjC,mBAAOT,EAAP,KAAaY,EAAb,KACA,EAA4BH,oBAAS,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACMnB,EAAUoB,sBA8ChB,OA5CAC,qBAAU,WACN,IAAMC,EAAU,IAAIC,IAEdC,EAASC,YAAUzB,EAAQ0B,QAAS,SACpCC,EAAcH,EAAOI,KACvBC,YAAOL,EAAOI,KAAKE,YAAa,OAChC7B,aAAI,SAAA8B,GAAK,OAAIA,EAAMC,UACnBC,aAAO,SAAAD,GAAM,OAAe,IAAXA,KACjBE,aAAI,kBAAMf,GAAU,OAGlBgB,EAASC,YAAS,KACnBR,KACGS,YAAUf,GACVe,YAAUV,IAEbW,WAAU,WACP,GAAIpB,EACA,OAAOD,GAAQ,SAAAZ,GAAI,OAAIA,EAAO,QAI1C,OAAO,WACH8B,EAAOI,iBAEZ,CAACxB,EAASG,IAoBT,sBAAKhB,UAAU,MAAf,UACI,cAAC,EAAD,CAAOG,KAAMA,IACb,cAAC,EAAD,CACIL,QAASA,EACTH,YAtBQ,WACXqB,GAIDF,GAAW,GACXG,GAAU,GACVF,EAAQ,KALRD,GAAW,GACXG,GAAU,KAoBNrB,MAZE,WACVmB,EAAQ,GACRD,GAAW,GACXG,GAAU,UCpDlBqB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.5c4f9531.chunk.js","sourcesContent":["import './buttons.scss';\r\n\r\nconst Buttons = ({ toggleStart, reset, waitRef }) => {\r\n    const buttons = [\r\n        { name: 'start/stop', action: toggleStart, },\r\n        { name: 'reset', action: reset, },\r\n        { name: 'wait', ref: waitRef },\r\n    ]\r\n\r\n    const button = buttons.map(({ name, action, ref }) => {\r\n        return (\r\n            <button\r\n                ref={ref}\r\n                key={name}\r\n                className='btn'\r\n                onClick={action}>\r\n                {name}</button>\r\n        )\r\n    })\r\n\r\n    return <div>{button}</div>\r\n}\r\n\r\nexport default Buttons;","const Timer = ({ time }) => {\r\n\r\n    const getZero = (num) => {\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`\r\n        }\r\n        return num;\r\n    }\r\n\r\n    const hours = getZero(Math.floor((time / (60 * 60) % 24)));\r\n    const minutes = getZero(Math.floor((time / 60) % 60));\r\n    const seconds = getZero(Math.floor((time % 60)));\r\n\r\n    return (\r\n        <div>\r\n            {hours}:\r\n            {minutes}:\r\n            {seconds}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","\nimport { createRef, useEffect, useState } from 'react';\nimport { interval, Subject, debounceTime, filter, map, fromEvent } from 'rxjs';\nimport { takeUntil, tap, buffer } from \"rxjs/operators\";\n\nimport Buttons from '../buttons/Buttons';\nimport Timer from './../timer/Timer';\n\nimport './app.css';\n\nfunction App() {\n    const [started, setStarted] = useState(false);\n    const [time, setTime] = useState(0);\n    const [active, setActive] = useState(false);\n    const waitRef = createRef();\n\n    useEffect(() => {\n        const stream$ = new Subject()\n\n        const clicks = fromEvent(waitRef.current, 'click');\n        const doubleClick = clicks.pipe(\n            buffer(clicks.pipe(debounceTime(300))),\n            map(click => click.length),\n            filter(length => length === 2),\n            tap(() => setActive(false))\n        )\n\n        const timer$ = interval(1000)\n            .pipe(\n                takeUntil(stream$),\n                takeUntil(doubleClick),\n            )\n            .subscribe(() => {\n                if (active) {\n                    return setTime(time => time + 1)\n                }\n            })\n\n        return () => {\n            timer$.unsubscribe();\n        }\n    }, [started, active])\n\n    const toggleStart = () => {\n        if (!active) {\n            setStarted(true);\n            setActive(true);\n        } else {\n            setStarted(false);\n            setActive(false);\n            setTime(0);\n        }\n    }\n\n    const reset = () => {\n        setTime(0);\n        setStarted(true);\n        setActive(true);\n    }\n\n    return (\n        <div className=\"app\">\n            <Timer time={time} />\n            <Buttons\n                waitRef={waitRef}\n                toggleStart={toggleStart}\n                reset={reset} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}