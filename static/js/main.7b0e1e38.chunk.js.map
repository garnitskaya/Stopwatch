{"version":3,"sources":["components/buttons/Buttons.js","components/timer/Timer.js","components/app/App.js","index.js"],"names":["Buttons","toggleStart","reset","waitRef","activeLabel","active","className","onClick","ref","Timer","time","getZero","num","hours","Math","floor","minutes","seconds","App","useState","setTime","setActive","createRef","useEffect","stream$","Subject","clicks","fromEvent","current","doubleClick","pipe","buffer","debounceTime","map","click","length","filter","tap","timer$","interval","takeUntil","subscribe","unsubscribe","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAeeA,EAbC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,QAE7BC,EAFmD,EAAbC,OAEf,OAAS,QAEtC,OACI,qCACI,yBAAQC,UAAU,MAAMC,QAASN,EAAjC,UAA+CG,EAA/C,OACA,wBAAQE,UAAU,MAAMC,QAASL,EAAjC,mBACA,wBAAQI,UAAU,MAAME,IAAKL,EAA7B,sBCYGM,EAtBD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEPC,EAAU,SAACC,GACb,OAAIA,GAAO,GAAKA,EAAM,GACZ,IAAN,OAAWA,GAERA,GAGLC,EAAQF,EAAQG,KAAKC,MAAOL,EAAI,KAAe,KAC/CM,EAAUL,EAAQG,KAAKC,MAAOL,EAAO,GAAM,KAC3CO,EAAUN,EAAQG,KAAKC,MAAOL,EAAO,KAE3C,OACI,gCACKG,EADL,IAEKG,EAFL,IAGKC,M,MCiDEC,MAzDf,WACI,MAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA4BD,oBAAS,GAArC,mBAAOd,EAAP,KAAegB,EAAf,KACMlB,EAAUmB,sBA0ChB,OAxCAC,qBAAU,WACN,IAAMC,EAAU,IAAIC,IAEdC,EAASC,YAAUxB,EAAQyB,QAAS,SACpCC,EAAcH,EAAOI,KACvBC,YAAOL,EAAOI,KAAKE,YAAa,OAChCC,aAAI,SAAAC,GAAK,OAAIA,EAAMC,UACnBC,aAAO,SAAAD,GAAM,OAAe,IAAXA,KACjBE,aAAI,kBAAMhB,GAAU,OAGlBiB,EAASC,YAAS,KACnBT,KACGU,YAAUhB,GACVgB,YAAUX,IAEbY,WAAU,WACP,GAAIpC,EACA,OAAOe,GAAQ,SAAAV,GAAI,OAAIA,EAAO,QAI1C,OAAO,WACH4B,EAAOI,iBAEZ,CAACrC,IAgBA,sBAAKC,UAAU,MAAf,UACI,cAAC,EAAD,CAAOI,KAAMA,IACb,cAAC,EAAD,CACIL,OAAQA,EACRF,QAASA,EACTF,YAnBQ,WACXI,GAGDgB,GAAU,GACVD,EAAQ,IAHRC,GAAU,IAkBNnB,MAXE,WACVkB,EAAQ,UC9ChBuB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.7b0e1e38.chunk.js","sourcesContent":["import './buttons.scss';\r\n\r\nconst Buttons = ({ toggleStart, reset, waitRef, active }) => {\r\n\r\n    const activeLabel = active ? 'stop' : 'start';\r\n\r\n    return (\r\n        <>\r\n            <button className='btn' onClick={toggleStart}>{activeLabel} </button>\r\n            <button className='btn' onClick={reset}>reset</button>\r\n            <button className='btn' ref={waitRef}>wait</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Buttons;","const Timer = ({ time }) => {\r\n\r\n    const getZero = (num) => {\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`\r\n        }\r\n        return num;\r\n    }\r\n\r\n    const hours = getZero(Math.floor((time / (60 * 60) % 24)));\r\n    const minutes = getZero(Math.floor((time / 60) % 60));\r\n    const seconds = getZero(Math.floor((time % 60)));\r\n\r\n    return (\r\n        <div>\r\n            {hours}:\r\n            {minutes}:\r\n            {seconds}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import { createRef, useEffect, useState } from 'react';\nimport { interval, Subject, debounceTime, filter, map, fromEvent } from 'rxjs';\nimport { takeUntil, tap, buffer } from \"rxjs/operators\";\n\nimport Buttons from '../buttons/Buttons';\nimport Timer from './../timer/Timer';\n\nimport './app.css';\n\nfunction App() {\n    const [time, setTime] = useState(0);\n    const [active, setActive] = useState(false);\n    const waitRef = createRef();\n\n    useEffect(() => {\n        const stream$ = new Subject()\n\n        const clicks = fromEvent(waitRef.current, 'click');\n        const doubleClick = clicks.pipe(\n            buffer(clicks.pipe(debounceTime(300))),\n            map(click => click.length),\n            filter(length => length === 2),\n            tap(() => setActive(false))\n        )\n\n        const timer$ = interval(1000)\n            .pipe(\n                takeUntil(stream$),\n                takeUntil(doubleClick),\n            )\n            .subscribe(() => {\n                if (active) {\n                    return setTime(time => time + 1)\n                }\n            })\n\n        return () => {\n            timer$.unsubscribe();\n        }\n    }, [active])\n\n    const toggleStart = () => {\n        if (!active) {\n            setActive(true);\n        } else {\n            setActive(false);\n            setTime(0);\n        }\n    }\n\n    const reset = () => {\n        setTime(0);\n    }\n\n    return (\n        <div className=\"app\">\n            <Timer time={time} />\n            <Buttons\n                active={active}\n                waitRef={waitRef}\n                toggleStart={toggleStart}\n                reset={reset} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}